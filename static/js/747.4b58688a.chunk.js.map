{"version":3,"file":"static/js/747.4b58688a.chunk.js","mappings":"6KACA,EAAkC,qCAAlC,EAAwF,oC,UCElFA,EAAYC,SAASC,cAAc,eAUzC,EATc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACf,OAAOC,EAAAA,EAAAA,eACL,gBAAKC,UAAWC,EAAhB,UACE,gBAAKD,UAAWC,EAAhB,SAAwCH,MAE1CH,EAEH,E,uHCVD,EAAwB,2BAAxB,EAAsE,sCCqFtE,EA5EoB,WAClB,IAAQO,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAAsCE,EAAAA,EAAAA,MAAxBC,EAAd,EAAQC,KAAgBC,EAAxB,EAAwBA,UACxB,GAAsBC,EAAAA,EAAAA,KAAfC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CAAEC,KAAM,GAAIC,OAAQ,IACnCC,iBAAkBC,EAAAA,EAClBC,SAAS,WAAD,wBAAE,WAAMC,GAAN,qEACWf,EAASgB,MAC1B,SAAAC,GAAO,OACLA,EAAQP,KAAKQ,gBAAkBH,EAAOL,KAAKQ,cAAcC,MADpD,IAFD,uBAMNZ,EAAOa,YACPC,EAAAA,GAAAA,MAAA,UAAeN,EAAOL,KAAKS,OAA3B,4BAPM,0CAWFf,EAAY,CAChBM,KAAMK,EAAOL,KAAKS,OAClBR,OAAQI,EAAOJ,OAAOQ,OACtBG,GAAIzB,IAdE,OAgBRwB,EAAAA,GAAAA,QAAc,gCACdd,EAAOa,YACPG,YAAW,kBAAMlB,EAAS,YAAf,GAA6B,KAlBhC,4CAAF,mDAAC,KAsBLmB,GAAiBC,EAAAA,EAAAA,UAAQ,WAC7B,IAAKvB,EAAW,OAAOF,EAAS0B,QAAO,SAAAT,GAAO,OAAIA,EAAQK,KAAOzB,CAAnB,GAC/C,GAAE,CAACA,EAAWG,EAAUE,IAEzB,OACE,4BACE,eAAIP,UAAWC,EAAf,2BACEM,IACA,iBAAKP,UAAWC,EAAhB,WACE,kCAAU4B,EAAe,GAAGd,SAC5B,oCAAYc,EAAe,GAAGb,cAGlC,kBAAMG,SAAUP,EAAOoB,aAAvB,WACE,SAACC,EAAA,EAAD,CACEN,GAAG,OACHO,MAAM,WACNC,QAAQ,WACRC,GAAI,CAAEC,MAAO,EAAGC,GAAI,GACpBvB,KAAK,OACLwB,KAAK,OACLC,MAAO5B,EAAOQ,OAAOL,KACrB0B,SAAU7B,EAAO8B,aACjBC,MAAO/B,EAAOgC,QAAQ7B,MAAQ8B,QAAQjC,EAAOkC,OAAO/B,MACpDgC,WAAYnC,EAAOgC,QAAQ7B,MAAQH,EAAOkC,OAAO/B,QAEnD,SAACkB,EAAA,EAAD,CACEN,GAAG,SACHO,MAAM,mBACNC,QAAQ,WACRC,GAAI,CAAEC,MAAO,EAAGC,GAAI,GACpBvB,KAAK,SACLwB,KAAK,MACLC,MAAO5B,EAAOQ,OAAOJ,OACrByB,SAAU7B,EAAO8B,aACjBC,MAAO/B,EAAOgC,QAAQ5B,QAAU6B,QAAQjC,EAAOkC,OAAO9B,QACtD+B,WAAYnC,EAAOgC,QAAQ5B,QAAUJ,EAAOkC,OAAO9B,UAErD,SAACgC,EAAA,EAAD,CAAQZ,GAAI,CAAEC,MAAO,EAAGY,MAAO,SAAWV,KAAK,SAA/C,uBAMP,ECzED,EARwB,WACtB,OACE,SAAC,EAAD,WACE,SAAC,EAAD,KAGL,C","sources":["webpack://phonebook-app/./src/components/modalWindow/ModalWindow.module.css?f7f3","components/modalWindow/ModalWindow.jsx","webpack://phonebook-app/./src/components/phoneBook/editContact/EditContact.module.css?561d","components/phoneBook/editContact/EditContact.jsx","pages/EditContactPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Modal__backdrop\":\"ModalWindow_Modal__backdrop__bmmsw\",\"Modal__content\":\"ModalWindow_Modal__content__i4E+Y\"};","import { createPortal } from 'react-dom';\nimport css from './ModalWindow.module.css';\n\nconst modalRoot = document.querySelector('#modal-root');\nconst Modal = ({ children }) => {\n  return createPortal(\n    <div className={css['Modal__backdrop']}>\n      <div className={css['Modal__content']}>{children}</div>\n    </div>,\n    modalRoot\n  );\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"EditContact_title__2nHc5\",\"contactContainer\":\"EditContact_contactContainer__VwnRG\"};","import TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport toast from 'react-hot-toast';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useMemo } from 'react';\nimport { useFormik } from 'formik';\nimport { useFetchContactsQuery, useEditContactMutation } from 'redux/index';\nimport { submitSchema } from 'services';\nimport css from './EditContact.module.css';\n\nconst EditContact = () => {\n  const { contactId } = useParams();\n  const { data: contacts, isLoading } = useFetchContactsQuery();\n  const [editContact] = useEditContactMutation();\n  const navigate = useNavigate();\n  const formik = useFormik({\n    initialValues: { name: '', number: '' },\n    validationSchema: submitSchema,\n    onSubmit: async values => {\n      const isIncluded = contacts.some(\n        contact =>\n          contact.name.toLowerCase() === values.name.toLowerCase().trim()\n      );\n      if (isIncluded) {\n        formik.resetForm();\n        toast.error(`${values.name.trim()} is already in contacts`);\n        return;\n      }\n\n      await editContact({\n        name: values.name.trim(),\n        number: values.number.trim(),\n        id: contactId,\n      });\n      toast.success('Contact successfully edited!');\n      formik.resetForm();\n      setTimeout(() => navigate('/contacts'), 500);\n    },\n  });\n\n  const filtredContact = useMemo(() => {\n    if (!isLoading) return contacts.filter(contact => contact.id === contactId);\n  }, [contactId, contacts, isLoading]);\n\n  return (\n    <div>\n      <h2 className={css.title}>Edit contact</h2>\n      {!isLoading && (\n        <div className={css.contactContainer}>\n          <p>Name: {filtredContact[0].name}</p>\n          <p>Number: {filtredContact[0].number}</p>\n        </div>\n      )}\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          id=\"name\"\n          label=\"New name\"\n          variant=\"outlined\"\n          sx={{ width: 1, mb: 2 }}\n          name=\"name\"\n          type=\"text\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          id=\"number\"\n          label=\"New phone number\"\n          variant=\"outlined\"\n          sx={{ width: 1, mb: 2 }}\n          name=\"number\"\n          type=\"tel\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n        />\n        <Button sx={{ width: 1, color: 'black' }} type=\"submit\">\n          Save\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default EditContact;\n","import Modal from 'components/modalWindow/ModalWindow';\nimport EditContact from 'components/phoneBook/editContact/EditContact';\n\nconst EditContactPage = () => {\n  return (\n    <Modal>\n      <EditContact />\n    </Modal>\n  );\n};\n\nexport default EditContactPage;\n"],"names":["modalRoot","document","querySelector","children","createPortal","className","css","contactId","useParams","useFetchContactsQuery","contacts","data","isLoading","useEditContactMutation","editContact","navigate","useNavigate","formik","useFormik","initialValues","name","number","validationSchema","submitSchema","onSubmit","values","some","contact","toLowerCase","trim","resetForm","toast","id","setTimeout","filtredContact","useMemo","filter","handleSubmit","TextField","label","variant","sx","width","mb","type","value","onChange","handleChange","error","touched","Boolean","errors","helperText","Button","color"],"sourceRoot":""}